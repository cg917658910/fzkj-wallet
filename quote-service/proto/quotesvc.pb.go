// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: quotesvc.proto

package quotesvc

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FiatQuoteRequest struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Fiat   string `protobuf:"bytes,2,opt,name=fiat,proto3" json:"fiat,omitempty"`
}

func (m *FiatQuoteRequest) Reset()         { *m = FiatQuoteRequest{} }
func (m *FiatQuoteRequest) String() string { return proto.CompactTextString(m) }
func (*FiatQuoteRequest) ProtoMessage()    {}
func (*FiatQuoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20cdc38b77e386ac, []int{0}
}
func (m *FiatQuoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FiatQuoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FiatQuoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FiatQuoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FiatQuoteRequest.Merge(m, src)
}
func (m *FiatQuoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *FiatQuoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FiatQuoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FiatQuoteRequest proto.InternalMessageInfo

func (m *FiatQuoteRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *FiatQuoteRequest) GetFiat() string {
	if m != nil {
		return m.Fiat
	}
	return ""
}

type FiatQuoteResult struct {
	Symbol    string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Fiat      string  `protobuf:"bytes,2,opt,name=fiat,proto3" json:"fiat,omitempty"`
	SellPrice float32 `protobuf:"fixed32,3,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	BuyPrice  float32 `protobuf:"fixed32,4,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
}

func (m *FiatQuoteResult) Reset()         { *m = FiatQuoteResult{} }
func (m *FiatQuoteResult) String() string { return proto.CompactTextString(m) }
func (*FiatQuoteResult) ProtoMessage()    {}
func (*FiatQuoteResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_20cdc38b77e386ac, []int{1}
}
func (m *FiatQuoteResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FiatQuoteResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FiatQuoteResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FiatQuoteResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FiatQuoteResult.Merge(m, src)
}
func (m *FiatQuoteResult) XXX_Size() int {
	return m.Size()
}
func (m *FiatQuoteResult) XXX_DiscardUnknown() {
	xxx_messageInfo_FiatQuoteResult.DiscardUnknown(m)
}

var xxx_messageInfo_FiatQuoteResult proto.InternalMessageInfo

func (m *FiatQuoteResult) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *FiatQuoteResult) GetFiat() string {
	if m != nil {
		return m.Fiat
	}
	return ""
}

func (m *FiatQuoteResult) GetSellPrice() float32 {
	if m != nil {
		return m.SellPrice
	}
	return 0
}

func (m *FiatQuoteResult) GetBuyPrice() float32 {
	if m != nil {
		return m.BuyPrice
	}
	return 0
}

type FiatQuoteResponse struct {
	Code int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *FiatQuoteResult `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FiatQuoteResponse) Reset()         { *m = FiatQuoteResponse{} }
func (m *FiatQuoteResponse) String() string { return proto.CompactTextString(m) }
func (*FiatQuoteResponse) ProtoMessage()    {}
func (*FiatQuoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20cdc38b77e386ac, []int{2}
}
func (m *FiatQuoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FiatQuoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FiatQuoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FiatQuoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FiatQuoteResponse.Merge(m, src)
}
func (m *FiatQuoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *FiatQuoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FiatQuoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FiatQuoteResponse proto.InternalMessageInfo

func (m *FiatQuoteResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FiatQuoteResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *FiatQuoteResponse) GetData() *FiatQuoteResult {
	if m != nil {
		return m.Data
	}
	return nil
}

type HealthCheckRequest struct {
}

func (m *HealthCheckRequest) Reset()         { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()    {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20cdc38b77e386ac, []int{3}
}
func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(m, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

type HealthCheckResponse struct {
	Status  int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *HealthCheckResponse) Reset()         { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()    {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20cdc38b77e386ac, []int{4}
}
func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(m, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *HealthCheckResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*FiatQuoteRequest)(nil), "quotesvc.FiatQuoteRequest")
	proto.RegisterType((*FiatQuoteResult)(nil), "quotesvc.FiatQuoteResult")
	proto.RegisterType((*FiatQuoteResponse)(nil), "quotesvc.FiatQuoteResponse")
	proto.RegisterType((*HealthCheckRequest)(nil), "quotesvc.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "quotesvc.HealthCheckResponse")
}

func init() { proto.RegisterFile("quotesvc.proto", fileDescriptor_20cdc38b77e386ac) }

var fileDescriptor_20cdc38b77e386ac = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x6e, 0xda, 0x40,
	0x10, 0xc6, 0x40, 0x01, 0x0f, 0x15, 0xd0, 0x6d, 0x85, 0x5c, 0x7e, 0x2c, 0xe4, 0x13, 0x97, 0x62,
	0x95, 0xde, 0x7b, 0x68, 0xa5, 0x36, 0xc7, 0xc4, 0x39, 0x26, 0x52, 0xb4, 0x36, 0x1b, 0xdb, 0x8a,
	0xf1, 0x1a, 0x76, 0x8d, 0xe4, 0x6b, 0x9e, 0x20, 0x52, 0x5e, 0x2a, 0xb9, 0x21, 0xe5, 0x92, 0x63,
	0x04, 0x79, 0x90, 0x68, 0xd7, 0x0b, 0x21, 0x09, 0x39, 0xe4, 0x36, 0x33, 0xdf, 0xec, 0xf7, 0x33,
	0x36, 0x34, 0x66, 0x29, 0xe5, 0x84, 0x2d, 0xbc, 0x51, 0x32, 0xa7, 0x9c, 0xa2, 0xda, 0xa6, 0xef,
	0xf4, 0x7c, 0x4a, 0xfd, 0x88, 0xd8, 0x38, 0x09, 0x6d, 0x1c, 0xc7, 0x94, 0x63, 0x1e, 0xd2, 0x98,
	0xe5, 0x7b, 0xd6, 0x6f, 0x68, 0xfd, 0x0b, 0x31, 0x3f, 0x12, 0xdb, 0x0e, 0x99, 0xa5, 0x84, 0x71,
	0xd4, 0x86, 0x0a, 0xcb, 0xa6, 0x2e, 0x8d, 0x0c, 0x6d, 0xa0, 0x0d, 0x75, 0x47, 0x75, 0x08, 0x41,
	0xf9, 0x3c, 0xc4, 0xdc, 0x28, 0xca, 0xa9, 0xac, 0xad, 0x0c, 0x9a, 0x3b, 0xef, 0x59, 0x1a, 0x7d,
	0xe8, 0x39, 0xea, 0x03, 0x30, 0x12, 0x45, 0x67, 0xc9, 0x3c, 0xf4, 0x88, 0x51, 0x1a, 0x68, 0xc3,
	0xa2, 0xa3, 0x8b, 0xc9, 0xa1, 0x18, 0xa0, 0x2e, 0xe8, 0x6e, 0x9a, 0x29, 0xb4, 0x2c, 0xd1, 0x9a,
	0x9b, 0x66, 0x12, 0xb4, 0x02, 0xf8, 0xb2, 0x2b, 0x9d, 0xd0, 0x98, 0x11, 0x21, 0xe2, 0xd1, 0x09,
	0x91, 0xd2, 0x9f, 0x1c, 0x59, 0xa3, 0x16, 0x94, 0xa6, 0xcc, 0x57, 0xba, 0xa2, 0x44, 0x3f, 0xa0,
	0x3c, 0xc1, 0x1c, 0x4b, 0xc1, 0xfa, 0xf8, 0xfb, 0x68, 0x7b, 0xbc, 0x57, 0x59, 0x1c, 0xb9, 0x66,
	0x7d, 0x03, 0x74, 0x40, 0x70, 0xc4, 0x83, 0xbf, 0x01, 0xf1, 0x2e, 0xd4, 0x99, 0xac, 0xff, 0xf0,
	0xf5, 0xc5, 0x54, 0x39, 0x10, 0xf1, 0x39, 0xe6, 0x29, 0x53, 0x1e, 0x54, 0x87, 0x0c, 0xa8, 0x4e,
	0x09, 0x63, 0xd8, 0x27, 0xca, 0xc9, 0xa6, 0x1d, 0xdf, 0x6a, 0xf0, 0x59, 0x8a, 0x1e, 0x93, 0xf9,
	0x42, 0xc4, 0x3e, 0x81, 0xfa, 0x0e, 0x33, 0xea, 0x3d, 0xfb, 0x7b, 0x6b, 0xa3, 0xd3, 0x7f, 0x07,
	0xcd, 0xed, 0x58, 0xcd, 0xcb, 0xbb, 0xc7, 0xeb, 0xa2, 0x8e, 0xaa, 0x76, 0x20, 0x51, 0x74, 0x0a,
	0xfa, 0x36, 0x25, 0xea, 0xec, 0x8d, 0x9e, 0x13, 0x77, 0xf7, 0x9f, 0x25, 0xa7, 0x6d, 0x4b, 0xda,
	0x16, 0x6a, 0xd8, 0x8b, 0x9f, 0xb6, 0xdc, 0xb3, 0xc5, 0x07, 0xfd, 0x63, 0xdc, 0xac, 0x4c, 0x6d,
	0xb9, 0x32, 0xb5, 0x87, 0x95, 0xa9, 0x5d, 0xad, 0xcd, 0xc2, 0x72, 0x6d, 0x16, 0xee, 0xd7, 0x66,
	0xc1, 0xad, 0xc8, 0x1f, 0xee, 0xd7, 0x53, 0x00, 0x00, 0x00, 0xff, 0xff, 0xca, 0x03, 0xd3, 0x0d,
	0xaa, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QuoteServiceClient is the client API for QuoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QuoteServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	//
	FiatQuote(ctx context.Context, in *FiatQuoteRequest, opts ...grpc.CallOption) (*FiatQuoteResponse, error)
}

type quoteServiceClient struct {
	cc *grpc.ClientConn
}

func NewQuoteServiceClient(cc *grpc.ClientConn) QuoteServiceClient {
	return &quoteServiceClient{cc}
}

func (c *quoteServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/quotesvc.QuoteService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) FiatQuote(ctx context.Context, in *FiatQuoteRequest, opts ...grpc.CallOption) (*FiatQuoteResponse, error) {
	out := new(FiatQuoteResponse)
	err := c.cc.Invoke(ctx, "/quotesvc.QuoteService/FiatQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuoteServiceServer is the server API for QuoteService service.
type QuoteServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	//
	FiatQuote(context.Context, *FiatQuoteRequest) (*FiatQuoteResponse, error)
}

// UnimplementedQuoteServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQuoteServiceServer struct {
}

func (*UnimplementedQuoteServiceServer) HealthCheck(ctx context.Context, req *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedQuoteServiceServer) FiatQuote(ctx context.Context, req *FiatQuoteRequest) (*FiatQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FiatQuote not implemented")
}

func RegisterQuoteServiceServer(s *grpc.Server, srv QuoteServiceServer) {
	s.RegisterService(&_QuoteService_serviceDesc, srv)
}

func _QuoteService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotesvc.QuoteService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_FiatQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FiatQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).FiatQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotesvc.QuoteService/FiatQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).FiatQuote(ctx, req.(*FiatQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuoteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quotesvc.QuoteService",
	HandlerType: (*QuoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _QuoteService_HealthCheck_Handler,
		},
		{
			MethodName: "FiatQuote",
			Handler:    _QuoteService_FiatQuote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quotesvc.proto",
}

func (m *FiatQuoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FiatQuoteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuotesvc(dAtA, i, uint64(len(m.Symbol)))
		i += copy(dAtA[i:], m.Symbol)
	}
	if len(m.Fiat) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuotesvc(dAtA, i, uint64(len(m.Fiat)))
		i += copy(dAtA[i:], m.Fiat)
	}
	return i, nil
}

func (m *FiatQuoteResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FiatQuoteResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Symbol) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuotesvc(dAtA, i, uint64(len(m.Symbol)))
		i += copy(dAtA[i:], m.Symbol)
	}
	if len(m.Fiat) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuotesvc(dAtA, i, uint64(len(m.Fiat)))
		i += copy(dAtA[i:], m.Fiat)
	}
	if m.SellPrice != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SellPrice))))
		i += 4
	}
	if m.BuyPrice != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BuyPrice))))
		i += 4
	}
	return i, nil
}

func (m *FiatQuoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FiatQuoteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQuotesvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuotesvc(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintQuotesvc(dAtA, i, uint64(m.Data.Size()))
		n1, err1 := m.Data.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *HealthCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HealthCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQuotesvc(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuotesvc(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintQuotesvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FiatQuoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuotesvc(uint64(l))
	}
	l = len(m.Fiat)
	if l > 0 {
		n += 1 + l + sovQuotesvc(uint64(l))
	}
	return n
}

func (m *FiatQuoteResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuotesvc(uint64(l))
	}
	l = len(m.Fiat)
	if l > 0 {
		n += 1 + l + sovQuotesvc(uint64(l))
	}
	if m.SellPrice != 0 {
		n += 5
	}
	if m.BuyPrice != 0 {
		n += 5
	}
	return n
}

func (m *FiatQuoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovQuotesvc(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovQuotesvc(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovQuotesvc(uint64(l))
	}
	return n
}

func (m *HealthCheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HealthCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovQuotesvc(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovQuotesvc(uint64(l))
	}
	return n
}

func sovQuotesvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuotesvc(x uint64) (n int) {
	return sovQuotesvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FiatQuoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuotesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FiatQuoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FiatQuoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuotesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fiat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuotesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fiat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuotesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FiatQuoteResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuotesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FiatQuoteResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FiatQuoteResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuotesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fiat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuotesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fiat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SellPrice = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BuyPrice = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQuotesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FiatQuoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuotesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FiatQuoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FiatQuoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuotesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuotesvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FiatQuoteResult{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuotesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuotesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuotesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuotesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuotesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuotesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuotesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuotesvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuotesvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuotesvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuotesvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuotesvc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthQuotesvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQuotesvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQuotesvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthQuotesvc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQuotesvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuotesvc   = fmt.Errorf("proto: integer overflow")
)
