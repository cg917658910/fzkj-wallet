// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: washsvc.proto

package washsvc

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type WashShortMsgRequest struct {
	Msg      string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	MsgId    string `protobuf:"bytes,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	TypeName string `protobuf:"bytes,4,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
}

func (m *WashShortMsgRequest) Reset()         { *m = WashShortMsgRequest{} }
func (m *WashShortMsgRequest) String() string { return proto.CompactTextString(m) }
func (*WashShortMsgRequest) ProtoMessage()    {}
func (*WashShortMsgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be7c267ed56d003, []int{0}
}
func (m *WashShortMsgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WashShortMsgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WashShortMsgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WashShortMsgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WashShortMsgRequest.Merge(m, src)
}
func (m *WashShortMsgRequest) XXX_Size() int {
	return m.Size()
}
func (m *WashShortMsgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WashShortMsgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WashShortMsgRequest proto.InternalMessageInfo

func (m *WashShortMsgRequest) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *WashShortMsgRequest) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *WashShortMsgRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *WashShortMsgRequest) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

type WashShortMsgResult struct {
	PayTime int64   `protobuf:"varint,1,opt,name=pay_time,json=payTime,proto3" json:"pay_time,omitempty"`
	PayCoin float64 `protobuf:"fixed64,2,opt,name=pay_coin,json=payCoin,proto3" json:"pay_coin,omitempty"`
	Balance float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (m *WashShortMsgResult) Reset()         { *m = WashShortMsgResult{} }
func (m *WashShortMsgResult) String() string { return proto.CompactTextString(m) }
func (*WashShortMsgResult) ProtoMessage()    {}
func (*WashShortMsgResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be7c267ed56d003, []int{1}
}
func (m *WashShortMsgResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WashShortMsgResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WashShortMsgResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WashShortMsgResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WashShortMsgResult.Merge(m, src)
}
func (m *WashShortMsgResult) XXX_Size() int {
	return m.Size()
}
func (m *WashShortMsgResult) XXX_DiscardUnknown() {
	xxx_messageInfo_WashShortMsgResult.DiscardUnknown(m)
}

var xxx_messageInfo_WashShortMsgResult proto.InternalMessageInfo

func (m *WashShortMsgResult) GetPayTime() int64 {
	if m != nil {
		return m.PayTime
	}
	return 0
}

func (m *WashShortMsgResult) GetPayCoin() float64 {
	if m != nil {
		return m.PayCoin
	}
	return 0
}

func (m *WashShortMsgResult) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type WashShortMsgResponse struct {
	Code int32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *WashShortMsgResult `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *WashShortMsgResponse) Reset()         { *m = WashShortMsgResponse{} }
func (m *WashShortMsgResponse) String() string { return proto.CompactTextString(m) }
func (*WashShortMsgResponse) ProtoMessage()    {}
func (*WashShortMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be7c267ed56d003, []int{2}
}
func (m *WashShortMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WashShortMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WashShortMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WashShortMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WashShortMsgResponse.Merge(m, src)
}
func (m *WashShortMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *WashShortMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WashShortMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WashShortMsgResponse proto.InternalMessageInfo

func (m *WashShortMsgResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *WashShortMsgResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *WashShortMsgResponse) GetData() *WashShortMsgResult {
	if m != nil {
		return m.Data
	}
	return nil
}

type HealthCheckRequest struct {
}

func (m *HealthCheckRequest) Reset()         { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()    {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be7c267ed56d003, []int{3}
}
func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(m, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

type HealthCheckResponse struct {
	Status  int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *HealthCheckResponse) Reset()         { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()    {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3be7c267ed56d003, []int{4}
}
func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(m, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *HealthCheckResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*WashShortMsgRequest)(nil), "washsvc.WashShortMsgRequest")
	proto.RegisterType((*WashShortMsgResult)(nil), "washsvc.WashShortMsgResult")
	proto.RegisterType((*WashShortMsgResponse)(nil), "washsvc.WashShortMsgResponse")
	proto.RegisterType((*HealthCheckRequest)(nil), "washsvc.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "washsvc.HealthCheckResponse")
}

func init() { proto.RegisterFile("washsvc.proto", fileDescriptor_3be7c267ed56d003) }

var fileDescriptor_3be7c267ed56d003 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x93, 0x34, 0x69, 0x26, 0x20, 0x60, 0x52, 0x90, 0x9b, 0x06, 0x0b, 0xf9, 0xc4, 0xa9,
	0x16, 0xe5, 0x0d, 0xe8, 0x01, 0x38, 0xc0, 0xc1, 0x20, 0x21, 0x4e, 0xd1, 0xd6, 0x1e, 0xec, 0x15,
	0xd9, 0x5d, 0xe3, 0xd9, 0xa4, 0xca, 0x95, 0x27, 0x40, 0xe2, 0xa5, 0x38, 0x46, 0xe2, 0xc2, 0x11,
	0x25, 0x3c, 0x08, 0xf2, 0xda, 0xa6, 0x2d, 0x6d, 0x6f, 0xfb, 0xcd, 0x37, 0xfa, 0x7e, 0x46, 0x0b,
	0x77, 0xcf, 0x05, 0xe7, 0xbc, 0x4a, 0x8e, 0x8b, 0xd2, 0x58, 0x83, 0xc3, 0x06, 0x4e, 0x67, 0x99,
	0x31, 0xd9, 0x82, 0x22, 0x51, 0xc8, 0x48, 0x68, 0x6d, 0xac, 0xb0, 0xd2, 0x68, 0xae, 0xd7, 0xc2,
	0x73, 0x98, 0x7c, 0x10, 0x9c, 0xbf, 0xcb, 0x4d, 0x69, 0xdf, 0x70, 0x16, 0xd3, 0x97, 0x25, 0xb1,
	0xc5, 0xfb, 0xd0, 0x53, 0x9c, 0xf9, 0xde, 0x13, 0xef, 0xe9, 0x28, 0xae, 0x9e, 0xf8, 0x10, 0x06,
	0x8a, 0xb3, 0xb9, 0x4c, 0xfd, 0xae, 0x1b, 0xee, 0x29, 0xce, 0x5e, 0xa7, 0x38, 0x85, 0xfd, 0x64,
	0x59, 0x96, 0xa4, 0x93, 0xb5, 0xdf, 0x73, 0xc4, 0x3f, 0x8c, 0x47, 0x30, 0xb2, 0xeb, 0x82, 0xe6,
	0x5a, 0x28, 0xf2, 0xfb, 0x35, 0x59, 0x0d, 0xde, 0x0a, 0x45, 0x61, 0x0a, 0x78, 0xd5, 0x98, 0x97,
	0x0b, 0x8b, 0x87, 0xb0, 0x5f, 0x88, 0xf5, 0xdc, 0x4a, 0x45, 0xce, 0xbc, 0x17, 0x0f, 0x0b, 0xb1,
	0x7e, 0x2f, 0x15, 0xb5, 0x54, 0x62, 0xa4, 0x76, 0x11, 0x3c, 0x47, 0x9d, 0x1a, 0xa9, 0xd1, 0x87,
	0xe1, 0x99, 0x58, 0x08, 0x9d, 0x90, 0xcb, 0xe0, 0xc5, 0x2d, 0x0c, 0x15, 0x1c, 0xfc, 0xe7, 0x52,
	0x18, 0xcd, 0x84, 0x08, 0xfd, 0xc4, 0xa4, 0xb5, 0xc7, 0x5e, 0xec, 0xde, 0x6d, 0xe7, 0xee, 0x45,
	0xe7, 0x08, 0xfa, 0xa9, 0xb0, 0xc2, 0x89, 0x8e, 0x4f, 0x8e, 0x8e, 0xdb, 0x0b, 0x5f, 0x0f, 0x1e,
	0xbb, 0xc5, 0xf0, 0x00, 0xf0, 0x15, 0x89, 0x85, 0xcd, 0x4f, 0x73, 0x4a, 0x3e, 0x37, 0xc7, 0x0c,
	0x5f, 0xc2, 0xe4, 0xca, 0xb4, 0xc9, 0xf0, 0x08, 0x06, 0x6c, 0x85, 0x5d, 0x72, 0x93, 0xa2, 0x41,
	0x55, 0x1b, 0x45, 0xcc, 0x22, 0xa3, 0x26, 0x4b, 0x0b, 0x4f, 0x36, 0x1e, 0x8c, 0x9d, 0x37, 0x95,
	0x2b, 0x99, 0x10, 0x7e, 0x84, 0xf1, 0x25, 0x61, 0xbc, 0x08, 0x78, 0x3d, 0xc4, 0x74, 0x76, 0x33,
	0x59, 0x67, 0x09, 0xef, 0x7d, 0xfd, 0xf9, 0xe7, 0x7b, 0x77, 0x84, 0xc3, 0x28, 0x77, 0x2c, 0x7e,
	0x82, 0x3b, 0x97, 0x5b, 0xe2, 0xec, 0x96, 0xf2, 0xb5, 0xf8, 0xe3, 0xdb, 0x4e, 0x53, 0xab, 0x1f,
	0x3a, 0xf5, 0x09, 0x3e, 0x88, 0x56, 0xcf, 0xa2, 0x6a, 0x33, 0xe2, 0x6a, 0x45, 0x71, 0xf6, 0xc2,
	0xff, 0xb1, 0x0d, 0xbc, 0xcd, 0x36, 0xf0, 0x7e, 0x6f, 0x03, 0xef, 0xdb, 0x2e, 0xe8, 0x6c, 0x76,
	0x41, 0xe7, 0xd7, 0x2e, 0xe8, 0x9c, 0x0d, 0xdc, 0x07, 0x7d, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x3f, 0xee, 0xb8, 0xec, 0xd8, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WashServiceClient is the client API for WashService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WashServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	//
	WashShortMsg(ctx context.Context, in *WashShortMsgRequest, opts ...grpc.CallOption) (*WashShortMsgResponse, error)
}

type washServiceClient struct {
	cc *grpc.ClientConn
}

func NewWashServiceClient(cc *grpc.ClientConn) WashServiceClient {
	return &washServiceClient{cc}
}

func (c *washServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/washsvc.WashService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *washServiceClient) WashShortMsg(ctx context.Context, in *WashShortMsgRequest, opts ...grpc.CallOption) (*WashShortMsgResponse, error) {
	out := new(WashShortMsgResponse)
	err := c.cc.Invoke(ctx, "/washsvc.WashService/WashShortMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WashServiceServer is the server API for WashService service.
type WashServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	//
	WashShortMsg(context.Context, *WashShortMsgRequest) (*WashShortMsgResponse, error)
}

// UnimplementedWashServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWashServiceServer struct {
}

func (*UnimplementedWashServiceServer) HealthCheck(ctx context.Context, req *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedWashServiceServer) WashShortMsg(ctx context.Context, req *WashShortMsgRequest) (*WashShortMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WashShortMsg not implemented")
}

func RegisterWashServiceServer(s *grpc.Server, srv WashServiceServer) {
	s.RegisterService(&_WashService_serviceDesc, srv)
}

func _WashService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WashServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/washsvc.WashService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WashServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WashService_WashShortMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WashShortMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WashServiceServer).WashShortMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/washsvc.WashService/WashShortMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WashServiceServer).WashShortMsg(ctx, req.(*WashShortMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WashService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "washsvc.WashService",
	HandlerType: (*WashServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _WashService_HealthCheck_Handler,
		},
		{
			MethodName: "WashShortMsg",
			Handler:    _WashService_WashShortMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "washsvc.proto",
}

func (m *WashShortMsgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WashShortMsgRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWashsvc(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.MsgId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWashsvc(dAtA, i, uint64(len(m.MsgId)))
		i += copy(dAtA[i:], m.MsgId)
	}
	if len(m.Currency) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWashsvc(dAtA, i, uint64(len(m.Currency)))
		i += copy(dAtA[i:], m.Currency)
	}
	if len(m.TypeName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWashsvc(dAtA, i, uint64(len(m.TypeName)))
		i += copy(dAtA[i:], m.TypeName)
	}
	return i, nil
}

func (m *WashShortMsgResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WashShortMsgResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PayTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWashsvc(dAtA, i, uint64(m.PayTime))
	}
	if m.PayCoin != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PayCoin))))
		i += 8
	}
	if m.Balance != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Balance))))
		i += 8
	}
	return i, nil
}

func (m *WashShortMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WashShortMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWashsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWashsvc(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWashsvc(dAtA, i, uint64(m.Data.Size()))
		n1, err1 := m.Data.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *HealthCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HealthCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWashsvc(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWashsvc(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintWashsvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WashShortMsgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovWashsvc(uint64(l))
	}
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovWashsvc(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovWashsvc(uint64(l))
	}
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovWashsvc(uint64(l))
	}
	return n
}

func (m *WashShortMsgResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PayTime != 0 {
		n += 1 + sovWashsvc(uint64(m.PayTime))
	}
	if m.PayCoin != 0 {
		n += 9
	}
	if m.Balance != 0 {
		n += 9
	}
	return n
}

func (m *WashShortMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWashsvc(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovWashsvc(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovWashsvc(uint64(l))
	}
	return n
}

func (m *HealthCheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HealthCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovWashsvc(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovWashsvc(uint64(l))
	}
	return n
}

func sovWashsvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWashsvc(x uint64) (n int) {
	return sovWashsvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WashShortMsgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWashsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WashShortMsgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WashShortMsgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWashsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWashsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWashsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWashsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWashsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWashsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWashsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWashsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWashsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWashsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWashsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWashsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWashsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWashsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWashsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WashShortMsgResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWashsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WashShortMsgResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WashShortMsgResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayTime", wireType)
			}
			m.PayTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWashsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayCoin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PayCoin = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Balance = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipWashsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWashsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWashsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WashShortMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWashsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WashShortMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WashShortMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWashsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWashsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWashsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWashsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWashsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWashsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWashsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &WashShortMsgResult{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWashsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWashsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWashsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWashsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWashsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWashsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWashsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWashsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWashsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWashsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWashsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWashsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWashsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWashsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWashsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWashsvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWashsvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWashsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWashsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWashsvc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWashsvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWashsvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWashsvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWashsvc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWashsvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWashsvc   = fmt.Errorf("proto: integer overflow")
)
