// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 5f7d5bf015
// Version Date: 2021-11-26T09:27:01Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/cg917658910/fzkj-wallet/wash-service/proto"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC WashServiceServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.WashServiceServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// washservice

		healthcheck: grpctransport.NewServer(
			endpoints.HealthCheckEndpoint,
			DecodeGRPCHealthCheckRequest,
			EncodeGRPCHealthCheckResponse,
			serverOptions...,
		),
		washshortmsg: grpctransport.NewServer(
			endpoints.WashShortMsgEndpoint,
			DecodeGRPCWashShortMsgRequest,
			EncodeGRPCWashShortMsgResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the WashServiceServer interface
type grpcServer struct {
	healthcheck  grpctransport.Handler
	washshortmsg grpctransport.Handler
}

// Methods for grpcServer to implement WashServiceServer interface

func (s *grpcServer) HealthCheck(ctx context.Context, req *pb.HealthCheckRequest) (*pb.HealthCheckResponse, error) {
	_, rep, err := s.healthcheck.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.HealthCheckResponse), nil
}

func (s *grpcServer) WashShortMsg(ctx context.Context, req *pb.WashShortMsgRequest) (*pb.WashShortMsgResponse, error) {
	_, rep, err := s.washshortmsg.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.WashShortMsgResponse), nil
}

// Server Decode

// DecodeGRPCHealthCheckRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC healthcheck request to a user-domain healthcheck request. Primarily useful in a server.
func DecodeGRPCHealthCheckRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.HealthCheckRequest)
	return req, nil
}

// DecodeGRPCWashShortMsgRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC washshortmsg request to a user-domain washshortmsg request. Primarily useful in a server.
func DecodeGRPCWashShortMsgRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.WashShortMsgRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCHealthCheckResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain healthcheck response to a gRPC healthcheck reply. Primarily useful in a server.
func EncodeGRPCHealthCheckResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.HealthCheckResponse)
	return resp, nil
}

// EncodeGRPCWashShortMsgResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain washshortmsg response to a gRPC washshortmsg reply. Primarily useful in a server.
func EncodeGRPCWashShortMsgResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.WashShortMsgResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
