// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 5f7d5bf015
// Version Date: 2021-11-26T09:27:01Z

// Package grpc provides a gRPC client for the WashService service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/cg917658910/fzkj-wallet/wash-service/proto"
	"github.com/cg917658910/fzkj-wallet/wash-service/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.WashServiceServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var healthcheckEndpoint endpoint.Endpoint
	{
		healthcheckEndpoint = grpctransport.NewClient(
			conn,
			"washsvc.WashService",
			"HealthCheck",
			EncodeGRPCHealthCheckRequest,
			DecodeGRPCHealthCheckResponse,
			pb.HealthCheckResponse{},
			clientOptions...,
		).Endpoint()
	}

	var washshortmsgEndpoint endpoint.Endpoint
	{
		washshortmsgEndpoint = grpctransport.NewClient(
			conn,
			"washsvc.WashService",
			"WashShortMsg",
			EncodeGRPCWashShortMsgRequest,
			DecodeGRPCWashShortMsgResponse,
			pb.WashShortMsgResponse{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		HealthCheckEndpoint:  healthcheckEndpoint,
		WashShortMsgEndpoint: washshortmsgEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCHealthCheckResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC healthcheck reply to a user-domain healthcheck response. Primarily useful in a client.
func DecodeGRPCHealthCheckResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.HealthCheckResponse)
	return reply, nil
}

// DecodeGRPCWashShortMsgResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC washshortmsg reply to a user-domain washshortmsg response. Primarily useful in a client.
func DecodeGRPCWashShortMsgResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.WashShortMsgResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCHealthCheckRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain healthcheck request to a gRPC healthcheck request. Primarily useful in a client.
func EncodeGRPCHealthCheckRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.HealthCheckRequest)
	return req, nil
}

// EncodeGRPCWashShortMsgRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain washshortmsg request to a gRPC washshortmsg request. Primarily useful in a client.
func EncodeGRPCWashShortMsgRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.WashShortMsgRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
