// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: notifysvc.proto

package notifysvc

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type OrderNotifyStartRequest struct {
}

func (m *OrderNotifyStartRequest) Reset()         { *m = OrderNotifyStartRequest{} }
func (m *OrderNotifyStartRequest) String() string { return proto.CompactTextString(m) }
func (*OrderNotifyStartRequest) ProtoMessage()    {}
func (*OrderNotifyStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46bdd05343b0f236, []int{0}
}
func (m *OrderNotifyStartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderNotifyStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderNotifyStartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderNotifyStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderNotifyStartRequest.Merge(m, src)
}
func (m *OrderNotifyStartRequest) XXX_Size() int {
	return m.Size()
}
func (m *OrderNotifyStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderNotifyStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderNotifyStartRequest proto.InternalMessageInfo

type OrderNotifyStartResponse struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *OrderNotifyStartResponse) Reset()         { *m = OrderNotifyStartResponse{} }
func (m *OrderNotifyStartResponse) String() string { return proto.CompactTextString(m) }
func (*OrderNotifyStartResponse) ProtoMessage()    {}
func (*OrderNotifyStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46bdd05343b0f236, []int{1}
}
func (m *OrderNotifyStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderNotifyStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderNotifyStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderNotifyStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderNotifyStartResponse.Merge(m, src)
}
func (m *OrderNotifyStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *OrderNotifyStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderNotifyStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrderNotifyStartResponse proto.InternalMessageInfo

func (m *OrderNotifyStartResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *OrderNotifyStartResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type OrderNotifyStopRequest struct {
}

func (m *OrderNotifyStopRequest) Reset()         { *m = OrderNotifyStopRequest{} }
func (m *OrderNotifyStopRequest) String() string { return proto.CompactTextString(m) }
func (*OrderNotifyStopRequest) ProtoMessage()    {}
func (*OrderNotifyStopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46bdd05343b0f236, []int{2}
}
func (m *OrderNotifyStopRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderNotifyStopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderNotifyStopRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderNotifyStopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderNotifyStopRequest.Merge(m, src)
}
func (m *OrderNotifyStopRequest) XXX_Size() int {
	return m.Size()
}
func (m *OrderNotifyStopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderNotifyStopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderNotifyStopRequest proto.InternalMessageInfo

type OrderNotifyStopResponse struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *OrderNotifyStopResponse) Reset()         { *m = OrderNotifyStopResponse{} }
func (m *OrderNotifyStopResponse) String() string { return proto.CompactTextString(m) }
func (*OrderNotifyStopResponse) ProtoMessage()    {}
func (*OrderNotifyStopResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46bdd05343b0f236, []int{3}
}
func (m *OrderNotifyStopResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderNotifyStopResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderNotifyStopResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderNotifyStopResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderNotifyStopResponse.Merge(m, src)
}
func (m *OrderNotifyStopResponse) XXX_Size() int {
	return m.Size()
}
func (m *OrderNotifyStopResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderNotifyStopResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OrderNotifyStopResponse proto.InternalMessageInfo

func (m *OrderNotifyStopResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *OrderNotifyStopResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type HealthCheckRequest struct {
}

func (m *HealthCheckRequest) Reset()         { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()    {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46bdd05343b0f236, []int{4}
}
func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(m, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

type HealthCheckResponse struct {
	Status  int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *HealthCheckResponse) Reset()         { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()    {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46bdd05343b0f236, []int{5}
}
func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(m, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *HealthCheckResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*OrderNotifyStartRequest)(nil), "notifysvc.OrderNotifyStartRequest")
	proto.RegisterType((*OrderNotifyStartResponse)(nil), "notifysvc.OrderNotifyStartResponse")
	proto.RegisterType((*OrderNotifyStopRequest)(nil), "notifysvc.OrderNotifyStopRequest")
	proto.RegisterType((*OrderNotifyStopResponse)(nil), "notifysvc.OrderNotifyStopResponse")
	proto.RegisterType((*HealthCheckRequest)(nil), "notifysvc.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "notifysvc.HealthCheckResponse")
}

func init() { proto.RegisterFile("notifysvc.proto", fileDescriptor_46bdd05343b0f236) }

var fileDescriptor_46bdd05343b0f236 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4e, 0xfa, 0x40,
	0x10, 0xc6, 0x29, 0xff, 0xbf, 0x10, 0xc6, 0x18, 0xc8, 0x80, 0x58, 0xab, 0x6e, 0xb0, 0x5e, 0x38,
	0xb1, 0x89, 0x3e, 0x80, 0x46, 0x0f, 0x7a, 0xd2, 0x04, 0xcf, 0x1e, 0xd6, 0xb2, 0x96, 0x46, 0xe8,
	0xd6, 0xee, 0x42, 0xf4, 0xea, 0x13, 0x98, 0xf8, 0x52, 0x1e, 0x49, 0xbc, 0x78, 0x32, 0x06, 0x7c,
	0x10, 0xc3, 0xb2, 0x20, 0x94, 0x94, 0xc4, 0xdb, 0xce, 0x7c, 0x5f, 0x7f, 0xdf, 0x64, 0xa6, 0x50,
	0x0c, 0x85, 0x0a, 0xee, 0x9e, 0x64, 0xdf, 0x6b, 0x44, 0xb1, 0x50, 0x02, 0x0b, 0xb3, 0x86, 0xb3,
	0xeb, 0x0b, 0xe1, 0x77, 0x38, 0x65, 0x51, 0x40, 0x59, 0x18, 0x0a, 0xc5, 0x54, 0x20, 0x42, 0x39,
	0x31, 0xba, 0xdb, 0xb0, 0x75, 0x15, 0xb7, 0x78, 0x7c, 0xa9, 0xfd, 0xd7, 0x8a, 0xc5, 0xaa, 0xc9,
	0x1f, 0x7a, 0x5c, 0x2a, 0xf7, 0x04, 0xec, 0x65, 0x49, 0x46, 0x22, 0x94, 0x1c, 0x11, 0xfe, 0x7b,
	0xa2, 0xc5, 0x6d, 0xab, 0x66, 0xd5, 0xd7, 0x9a, 0xfa, 0x8d, 0x25, 0xf8, 0xd7, 0x95, 0xbe, 0x9d,
	0xad, 0x59, 0xf5, 0x42, 0x73, 0xfc, 0x74, 0x6d, 0xa8, 0x2e, 0x10, 0x44, 0x34, 0x65, 0x1f, 0x27,
	0x62, 0xc7, 0xca, 0x9f, 0xd0, 0x15, 0xc0, 0x0b, 0xce, 0x3a, 0xaa, 0x7d, 0xd6, 0xe6, 0xde, 0xfd,
	0x14, 0x7b, 0x0e, 0xe5, 0x85, 0xae, 0x41, 0x56, 0x21, 0x27, 0x15, 0x53, 0x3d, 0x69, 0xa0, 0xa6,
	0x42, 0x1b, 0xf2, 0x5d, 0x2e, 0x25, 0xf3, 0xb9, 0x41, 0x4f, 0xcb, 0xc3, 0xcf, 0x2c, 0x6c, 0x98,
	0xd9, 0x78, 0xdc, 0x0f, 0x3c, 0x8e, 0x37, 0xb0, 0x3e, 0x87, 0xc6, 0xbd, 0xc6, 0xef, 0xca, 0x97,
	0x07, 0x71, 0x48, 0x9a, 0x3c, 0x99, 0xc8, 0x2d, 0x3e, 0xbf, 0x7f, 0xbf, 0x66, 0x0b, 0x98, 0xa7,
	0x6d, 0xad, 0xe2, 0x23, 0x94, 0x92, 0xcb, 0x46, 0x77, 0x0e, 0x92, 0x72, 0x24, 0xe7, 0x60, 0xa5,
	0xc7, 0xa4, 0xed, 0xe8, 0xb4, 0x4d, 0x2c, 0x53, 0x31, 0xb6, 0xd0, 0xc9, 0x27, 0x54, 0xea, 0x14,
	0x05, 0xc5, 0xc4, 0x29, 0x70, 0x3f, 0x0d, 0x3a, 0x3b, 0xa0, 0xe3, 0xae, 0xb2, 0x98, 0x58, 0x47,
	0xc7, 0x56, 0x10, 0x93, 0xb1, 0x22, 0x3a, 0xb5, 0xdf, 0x86, 0xc4, 0x1a, 0x0c, 0x89, 0xf5, 0x35,
	0x24, 0xd6, 0xcb, 0x88, 0x64, 0x06, 0x23, 0x92, 0xf9, 0x18, 0x91, 0xcc, 0x6d, 0x4e, 0xff, 0x98,
	0x47, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x39, 0x8e, 0xe7, 0xe5, 0xd4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotifyServiceClient is the client API for NotifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotifyServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// notify
	OrderNotifyStart(ctx context.Context, in *OrderNotifyStartRequest, opts ...grpc.CallOption) (*OrderNotifyStartResponse, error)
	OrderNotifyStop(ctx context.Context, in *OrderNotifyStopRequest, opts ...grpc.CallOption) (*OrderNotifyStopResponse, error)
}

type notifyServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotifyServiceClient(cc *grpc.ClientConn) NotifyServiceClient {
	return &notifyServiceClient{cc}
}

func (c *notifyServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/notifysvc.NotifyService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) OrderNotifyStart(ctx context.Context, in *OrderNotifyStartRequest, opts ...grpc.CallOption) (*OrderNotifyStartResponse, error) {
	out := new(OrderNotifyStartResponse)
	err := c.cc.Invoke(ctx, "/notifysvc.NotifyService/OrderNotifyStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyServiceClient) OrderNotifyStop(ctx context.Context, in *OrderNotifyStopRequest, opts ...grpc.CallOption) (*OrderNotifyStopResponse, error) {
	out := new(OrderNotifyStopResponse)
	err := c.cc.Invoke(ctx, "/notifysvc.NotifyService/OrderNotifyStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyServiceServer is the server API for NotifyService service.
type NotifyServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// notify
	OrderNotifyStart(context.Context, *OrderNotifyStartRequest) (*OrderNotifyStartResponse, error)
	OrderNotifyStop(context.Context, *OrderNotifyStopRequest) (*OrderNotifyStopResponse, error)
}

// UnimplementedNotifyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNotifyServiceServer struct {
}

func (*UnimplementedNotifyServiceServer) HealthCheck(ctx context.Context, req *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedNotifyServiceServer) OrderNotifyStart(ctx context.Context, req *OrderNotifyStartRequest) (*OrderNotifyStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderNotifyStart not implemented")
}
func (*UnimplementedNotifyServiceServer) OrderNotifyStop(ctx context.Context, req *OrderNotifyStopRequest) (*OrderNotifyStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderNotifyStop not implemented")
}

func RegisterNotifyServiceServer(s *grpc.Server, srv NotifyServiceServer) {
	s.RegisterService(&_NotifyService_serviceDesc, srv)
}

func _NotifyService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifysvc.NotifyService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_OrderNotifyStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderNotifyStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).OrderNotifyStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifysvc.NotifyService/OrderNotifyStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).OrderNotifyStart(ctx, req.(*OrderNotifyStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyService_OrderNotifyStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderNotifyStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServiceServer).OrderNotifyStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifysvc.NotifyService/OrderNotifyStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServiceServer).OrderNotifyStop(ctx, req.(*OrderNotifyStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotifyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notifysvc.NotifyService",
	HandlerType: (*NotifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _NotifyService_HealthCheck_Handler,
		},
		{
			MethodName: "OrderNotifyStart",
			Handler:    _NotifyService_OrderNotifyStart_Handler,
		},
		{
			MethodName: "OrderNotifyStop",
			Handler:    _NotifyService_OrderNotifyStop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifysvc.proto",
}

func (m *OrderNotifyStartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderNotifyStartRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *OrderNotifyStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderNotifyStartResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNotifysvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNotifysvc(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *OrderNotifyStopRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderNotifyStopRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *OrderNotifyStopResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderNotifyStopResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNotifysvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNotifysvc(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *HealthCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HealthCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNotifysvc(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNotifysvc(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeVarintNotifysvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OrderNotifyStartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrderNotifyStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNotifysvc(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovNotifysvc(uint64(l))
	}
	return n
}

func (m *OrderNotifyStopRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OrderNotifyStopResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovNotifysvc(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovNotifysvc(uint64(l))
	}
	return n
}

func (m *HealthCheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HealthCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovNotifysvc(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNotifysvc(uint64(l))
	}
	return n
}

func sovNotifysvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNotifysvc(x uint64) (n int) {
	return sovNotifysvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderNotifyStartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifysvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderNotifyStartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderNotifyStartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNotifysvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderNotifyStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifysvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderNotifyStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderNotifyStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifysvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifysvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotifysvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotifysvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderNotifyStopRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifysvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderNotifyStopRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderNotifyStopRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNotifysvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderNotifyStopResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifysvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderNotifyStopResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderNotifyStopResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifysvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifysvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotifysvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotifysvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifysvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNotifysvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifysvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifysvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifysvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotifysvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotifysvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNotifysvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotifysvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotifysvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotifysvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotifysvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNotifysvc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthNotifysvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNotifysvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNotifysvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthNotifysvc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNotifysvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotifysvc   = fmt.Errorf("proto: integer overflow")
)
